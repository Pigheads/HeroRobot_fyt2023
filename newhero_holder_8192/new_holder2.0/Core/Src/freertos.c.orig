/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tim.h"
#include "can.h"
#include "usart.h"
#include "holder.h"
#include "dr16.h"
#include "ui.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
osPoolId RDmemHandle;
osPoolId HDmemHandle;
/* USER CODE END Variables */
osThreadId LEDHandle;
osThreadId MSGHandle;
osThreadId UIHandle;
osThreadId KEYHandle;
osThreadId ChassisHandle;
osMessageQId RDmsgHandle;
osMessageQId HDmsgHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void taskLED(void const * argument);
void taskMsg(void const * argument);
void taskUI(void const * argument);
void taskKey(void const * argument);
void taskChassis(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
  osPoolDef(RDmem,16,RemoteData_t);
  RDmemHandle = osPoolCreate(osPool(RDmem));
    
  osPoolDef(HDmem,16,HolderData_t);
  HDmemHandle = osPoolCreate(osPool(HDmem));
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of RDmsg */
  osMessageQDef(RDmsg, 16, uint32_t);
  RDmsgHandle = osMessageCreate(osMessageQ(RDmsg), NULL);

  /* definition and creation of HDmsg */
  osMessageQDef(HDmsg, 16, uint32_t);
  HDmsgHandle = osMessageCreate(osMessageQ(HDmsg), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED */
  osThreadDef(LED, taskLED, osPriorityIdle, 0, 64);
  LEDHandle = osThreadCreate(osThread(LED), NULL);

  /* definition and creation of MSG */
  osThreadDef(MSG, taskMsg, osPriorityRealtime, 0, 128);
  MSGHandle = osThreadCreate(osThread(MSG), NULL);

  /* definition and creation of UI */
  osThreadDef(UI, taskUI, osPriorityBelowNormal, 0, 128);
  UIHandle = osThreadCreate(osThread(UI), NULL);

  /* definition and creation of KEY */
  osThreadDef(KEY, taskKey, osPriorityBelowNormal, 0, 128);
  KEYHandle = osThreadCreate(osThread(KEY), NULL);

  /* definition and creation of Chassis */
  osThreadDef(Chassis, taskChassis, osPriorityHigh, 0, 128);
  ChassisHandle = osThreadCreate(osThread(Chassis), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_taskLED */
/**
  * @brief  Function implementing the LED thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskLED */
void taskLED(void const * argument)
{
  /* USER CODE BEGIN taskLED */
    HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOC, LED4_Pin, GPIO_PIN_SET);
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
    HAL_GPIO_TogglePin(GPIOD, LED2_Pin);   
    HAL_GPIO_TogglePin(GPIOC, LED3_Pin);
    HAL_GPIO_TogglePin(GPIOC, LED4_Pin);  
    TIM1_SetPWMPluse(pluse);
    osDelay(1000);
  }
  /* USER CODE END taskLED */
}

/* USER CODE BEGIN Header_taskMsg */
/**
* @brief Function implementing the MSG thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskMsg */
void taskMsg(void const * argument)
{
  /* USER CODE BEGIN taskMsg */
  /* Infinite loop */
  for(;;)
  {
    RemoteData_t *RDMsg = (RemoteData_t *)osPoolAlloc(RDmemHandle);
    if(RDMsg != NULL)
    {
        RemoteDataMsg_Process(RDMsg);    
        osMessagePut(RDmsgHandle,(uint32_t)RDMsg,10);
    }
    HolderData_t *HDMsg = (HolderData_t *)osPoolAlloc(HDmemHandle);
    if(HDMsg != NULL)
    {
        HolderMsg_Process(HDMsg);
        osMessagePut(HDmsgHandle,(uint32_t)HDMsg,10);
    }
    osDelay(10);
  }
  /* USER CODE END taskMsg */
}

/* USER CODE BEGIN Header_taskUI */
/**
* @brief Function implementing the UI thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskUI */
void taskUI(void const * argument)
{
  /* USER CODE BEGIN taskUI */
  UI_Init();
  /* Infinite loop */
  for(;;)
  {
    UI_Process();
    osDelay(10);
  }
  /* USER CODE END taskUI */
}

/* USER CODE BEGIN Header_taskKey */
/**
* @brief Function implementing the KEY thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskKey */
void taskKey(void const * argument)
{
  /* USER CODE BEGIN taskKey */
  /* Infinite loop */
  for(;;)
  {
    Key_Scan();
    osDelay(10);
  }
  /* USER CODE END taskKey */
}

/* USER CODE BEGIN Header_taskChassis */
/**
* @brief Function implementing the Chassis thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskChassis */
void taskChassis(void const * argument)
{
  /* USER CODE BEGIN taskChassis */
  uint8_t 
  osEvent evt;
  /* Infinite loop */
  for(;;)
  {
    evt = osMessageGet(RDmsgHandle,10);
    if(evt.status == osEventMessage)
    {
        RemoteData_t *RDMsg = (RemoteData_t*)evt.value.v;
        osPoolFree(RDmemHandle,RDMsg);
    }
    osDelay(10);
  }
  /* USER CODE END taskChassis */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
